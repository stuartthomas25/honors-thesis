
import numpy as np
import pickle
from matplotlib import pyplot as plt
from datetime import timedelta
import csv
from mcmc import Recorder
from gvar import gvar

L = 64
lam = 0.5
m02s = [-0.80,-0.76, -0.72, -0.68, -0.64]
o_filenames = [f"cpp_code/outputs/data_{m02}.csv" for m02 in m02s]

recorders = pickle.load(open('data/binder_cumulant.pickle', 'rb'))
quantities = ['magnetization','susceptibility','binder_cumulant']

print(len(recorders))
for r in recorders:
    r.finalize_values()

tds = []
with open('data/log.out','r') as log_file:
    for line in log_file.readlines():
        if line[:8] == "Executed":
            time_str = line.split(" ")[-1]
            minutes,seconds = time_str.split(":")
            td = timedelta(minutes=int(minutes), seconds=int(seconds))
            tds.append(td.total_seconds()//60)

def bimodality(phi, dphi=0.1, **kwargs):
    bin_i = ((phi+0.5*dphi)//dphi).astype(int)
    reshuffled = np.where(bin_i<0, np.abs(bin_i), bin_i*2)
    bincounts = np.bincount(reshuffled)
    return 1 - bincounts[0] / np.amax(bincounts)

fig, axes = plt.subplots(4,1, figsize=(16,10))
for ax, quantity in zip(axes[:-1], quantities):

    means = np.array([r.derived_values[quantity] for r in recorders])
    stds  = np.array([r.derived_errors[quantity] for r in recorders])

    ax.errorbar(m02s, means, yerr=stds, fmt='o', label=f"$N={L}$", capsize=5)
    if quantity=="binder_cumulant":
        ax.axhline(2/3, c='r')
        ax.axhline(0, c='k')
    if quantity=="magnetization":
        ax.set_ylim( (0.0, np.sqrt(-m02s[-1]/lam)) )

    ax.set_ylabel(Recorder.derived_observables[quantity].label)



bimod_axis = axes[-1]
bimod_axis.plot(m02s, [bimodality(r.values['phi']) for r in recorders], 'o', label=f"$N={L}$")
bimod_axis.set_ylabel("B")

axes[-1].set_xlabel(r"$m_0^2$")

plt.show()


#####################################################################

def statvar(arr, tau=0.5):
    arr = np.array(arr)
    mean = np.mean(arr)

    # use jackknife to calculate errs
    def C_i(arr, i=None):
        ''' i indicates measurement to leave out (for jackknife)'''
        return (np.sum(arr) - arr[i]) / (arr.size-1)

    cumsum = 0
    for i in range(arr.size):
       cumsum += (C_i(arr, i) - mean)**2
    stddev = np.sqrt(2 * tau * cumsum)
    return gvar(mean, stddev)


def magnetization(phi):
    return statvar(np.abs(phi))

def binder_cumulant(phi):
    return 1 - statvar(phi**4) / (3 * statvar(phi**2)**2)

def susceptibility(phi):
    return statvar(phi**2) - statvar(np.abs(phi))**2

fig, axes = plt.subplots(4,1,figsize=(16,10))

axes[0].set_ylabel(r"$\langle|\bar\phi|\rangle$")
axes[1].set_ylabel(r"$\chi$")
axes[2].set_ylabel(r"$U$")
axes[3].set_ylabel("S")
axes[-1].set_xlabel("$m_0^2$")

plot_data = {
        'magnetizations' : [],
        'susceptibilities': [],
        'binder_cumulants': [],
        'actions' : []
}
labels = [r'$\langle|\bar\phi|\rangle$', r'$\chi$', r'$U$', r'$S$']

for m02, o_filenames in zip(m02s, o_filenames):
    actions = []
    phibars = []
    with open(o_filenames, 'r') as datafile:
        csv_data = csv.reader(datafile)
        for lines in csv_data:
            actions.append(float(lines[0]))
            phibars.append(float(lines[1]))
    actions = np.array(actions)
    phibars = np.array(phibars)

    plot_data['magnetizations'].append( magnetization(phibars) )
    plot_data['susceptibilities'].append( susceptibility(phibars) )
    plot_data['binder_cumulants'].append( binder_cumulant(phibars) )
    plot_data['actions'].append( statvar(actions) )

for ax, d, l in zip(axes, plot_data.values(), labels):
    ax.errorbar(m02s, [x.mean for x in d], yerr=[x.sdev for x in d], fmt='k.', capsize=3.)
    ax.set_ylabel(l)

axes[0].set_ylim((0., 1.1))
axes[2].axhline(2/3,ls=':')
axes[2].set_ylim((-0.1, None))
plt.show()


def average(x, y):
    return 2 (x - y) / (x + y)
